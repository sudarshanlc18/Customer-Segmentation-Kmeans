{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "10d71afc-024d-4c14-ba14-8ff8ba84c282",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>Contract</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>25</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>41</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>One year</td>\n",
       "      <td>25</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>52</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>19</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>One year</td>\n",
       "      <td>76</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>67</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>51</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender  SeniorCitizen Dependents  tenure PhoneService MultipleLines  \\\n",
       "0  Female              0         No       1           No            No   \n",
       "1    Male              0         No      41          Yes            No   \n",
       "2  Female              0        Yes      52          Yes            No   \n",
       "3  Female              0         No       1          Yes            No   \n",
       "4    Male              0         No      67          Yes            No   \n",
       "\n",
       "  InternetService        Contract  MonthlyCharges Churn  \n",
       "0             DSL  Month-to-month              25   Yes  \n",
       "1             DSL        One year              25    No  \n",
       "2             DSL  Month-to-month              19    No  \n",
       "3             DSL        One year              76   Yes  \n",
       "4     Fiber optic  Month-to-month              51    No  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load dataset from your Desktop path\n",
    "df = pd.read_csv('/Users/sudarshanlamichhane/Desktop/Datasets.csv')\n",
    "\n",
    "# Display first 5 rows\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "49fc021f-8eda-47e0-8ed4-960374fbb9f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   gender           7043 non-null   object\n",
      " 1   SeniorCitizen    7043 non-null   int64 \n",
      " 2   Dependents       7043 non-null   object\n",
      " 3   tenure           7043 non-null   int64 \n",
      " 4   PhoneService     7043 non-null   object\n",
      " 5   MultipleLines    7043 non-null   object\n",
      " 6   InternetService  7043 non-null   object\n",
      " 7   Contract         7043 non-null   object\n",
      " 8   MonthlyCharges   7043 non-null   int64 \n",
      " 9   Churn            7043 non-null   object\n",
      "dtypes: int64(3), object(7)\n",
      "memory usage: 550.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "515e673e-9272-4a2e-a6b6-f9167b59f277",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender             0\n",
       "SeniorCitizen      0\n",
       "Dependents         0\n",
       "tenure             0\n",
       "PhoneService       0\n",
       "MultipleLines      0\n",
       "InternetService    0\n",
       "Contract           0\n",
       "MonthlyCharges     0\n",
       "Churn              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0485caa9-3357-45c3-8cc0-9dcc64511062",
   "metadata": {},
   "outputs": [],
   "source": [
    "#encode categorical columns\n",
    "df_encoded = pd.get_dummies(df, drop_first=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "592e72e7-3243-4827-97f5-6e218bf47f05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>Churn_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>25</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>19</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>51</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen  tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "0              0       1              25        False           False   \n",
       "1              0      41              25         True           False   \n",
       "2              0      52              19        False            True   \n",
       "3              0       1              76        False           False   \n",
       "4              0      67              51         True           False   \n",
       "\n",
       "   PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "0             False              False                        False   \n",
       "1              True              False                        False   \n",
       "2              True              False                        False   \n",
       "3              True              False                        False   \n",
       "4              True              False                         True   \n",
       "\n",
       "   Contract_One year  Contract_Two year  Churn_Yes  \n",
       "0              False              False       True  \n",
       "1               True              False      False  \n",
       "2              False              False      False  \n",
       "3               True              False       True  \n",
       "4              False              False      False  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# encoded dataframe\n",
    "df_encoded.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a111efaf-c722-462b-a7b4-b1d0eae23666",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save preprocessed Data\n",
    "df_encoded.to_csv('preprocessed_customer_data.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8115dab4-4a02-44cf-8766-7dbdfd119032",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessed data saved clearly\n"
     ]
    }
   ],
   "source": [
    "print(\"Preprocessed data saved clearly\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e951db31-cd00-447a-997c-bb4e79cf49de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>Churn_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>25</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>19</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>51</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen  tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "0              0       1              25        False           False   \n",
       "1              0      41              25         True           False   \n",
       "2              0      52              19        False            True   \n",
       "3              0       1              76        False           False   \n",
       "4              0      67              51         True           False   \n",
       "\n",
       "   PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "0             False              False                        False   \n",
       "1              True              False                        False   \n",
       "2              True              False                        False   \n",
       "3              True              False                        False   \n",
       "4              True              False                         True   \n",
       "\n",
       "   Contract_One year  Contract_Two year  Churn_Yes  \n",
       "0              False              False       True  \n",
       "1               True              False      False  \n",
       "2              False              False      False  \n",
       "3               True              False       True  \n",
       "4              False              False      False  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode categorical columns \n",
    "df_encoded = pd.get_dummies(df, drop_first=True)\n",
    "\n",
    "# Display first few rows of the encoded dataset\n",
    "df_encoded.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "255a6666-3784-4c59-a56a-a433e7dc2ada",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: (4930, 11)\n",
      "Testing set size: (2113, 11)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "\n",
    "# preprocessed dataset \n",
    "df_encoded = pd.read_csv('preprocessed_customer_data.csv')\n",
    "\n",
    "# Split clearly \n",
    "train, test = train_test_split(df_encoded, test_size=0.3, random_state=42)\n",
    "\n",
    "# Clearly verify the split\n",
    "print(\"Training set size:\", train.shape)\n",
    "print(\"Testing set size:\", test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f23c81f8-8d0d-474b-b29a-6fd1d967d215",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.to_csv('training_data.csv', index=False)\n",
    "test.to_csv('testing_data.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b5be3a5d-b9b8-42cb-9de7-04550fa0f309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training and Testing datasets saved clearly!\n"
     ]
    }
   ],
   "source": [
    "print(\"Training and Testing datasets saved clearly!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5d5ea836-e7e5-4764-a88b-2c1d8393a1a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data scaled and saved clearly!\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Load training data \n",
    "train_df = pd.read_csv('training_data.csv')\n",
    "\n",
    "# Define scaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit and transform the training data\n",
    "train_scaled = scaler.fit_transform(train_df)\n",
    "\n",
    "# Save scaled training data clearly\n",
    "pd.DataFrame(train_scaled, columns=train_df.columns).to_csv('scaled_training_data.csv', index=False)\n",
    "\n",
    "print(\"Training data scaled and saved clearly!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "507e0860-6d66-433c-b931-3a68b6402ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import library\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import pandas as pd\n",
    "\n",
    "# Load training data\n",
    "train_df = pd.read_csv('training_data.csv')\n",
    "\n",
    "# Initialize scaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit and transform clearly\n",
    "train_scaled = scaler.fit_transform(train_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98cbb60f-f5d4-4165-892f-d18ed3140c7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Training data scaled and saved clearly!\n"
     ]
    }
   ],
   "source": [
    "print(\" Training data scaled and saved clearly!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "dd0ea341-9fb3-45c3-928f-f46e2acb97f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled training dataset exists clearly!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import os\n",
    "\n",
    "if os.path.exists('scaled_training_data.csv'):\n",
    "    print(\"Scaled training dataset exists clearly!\")\n",
    "else:\n",
    "    print(\"File not found clearly. Re-check your previous step.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9c42d6b2-80cd-4d42-8c8d-647b4540e5ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "import pandas as pd\n",
    "\n",
    "# Load scaled training data explicitly\n",
    "df_scaled = pd.read_csv('scaled_training_data.csv')\n",
    "\n",
    "# Define elbow method clearly\n",
    "wcss = []  # within-cluster sum of squares\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters=i, random_state=42)\n",
    "    kmeans.fit(df_scaled)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "\n",
    "# Plot explicitly to visualize elbow clearly\n",
    "plt.plot(range(1, 11), wcss, marker='o')\n",
    "plt.title('Elbow Method (Optimal number of clusters)')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('Within-cluster sum of squares (WCSS)')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f9abf433-c5c9-4673-bc09-10f0351f5bc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K-Means model trained and saved clearly as 'kmeans_model.pkl'.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "import joblib\n",
    "\n",
    "# Train K-Means explicitly with optimal clusters (example: 4)\n",
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "kmeans.fit(df_scaled)\n",
    "\n",
    "# Save trained model explicitly\n",
    "joblib.dump(kmeans, 'kmeans_model.pkl')\n",
    "\n",
    "print(\"K-Means model trained and saved clearly as 'kmeans_model.pkl'.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d4d2a9ed-2a47-4c60-bec5-1c5cd1fdaad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>Churn_Yes</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-1.031098</td>\n",
       "      <td>0.968482</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>1.153199</td>\n",
       "      <td>-0.882690</td>\n",
       "      <td>1.917660</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>1.667536</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-0.909207</td>\n",
       "      <td>-1.517485</td>\n",
       "      <td>-1.004472</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>1.203576</td>\n",
       "      <td>0.007241</td>\n",
       "      <td>-1.004472</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>-0.882690</td>\n",
       "      <td>1.917660</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-0.868577</td>\n",
       "      <td>0.703312</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>1.554507</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>1.776747</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>0.634750</td>\n",
       "      <td>0.471288</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>1.554507</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen    tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "0      -0.442415 -1.031098        0.968482     0.995547       -0.643291   \n",
       "1      -0.442415 -0.909207       -1.517485    -1.004472       -0.643291   \n",
       "2      -0.442415  1.203576        0.007241    -1.004472       -0.643291   \n",
       "3      -0.442415 -0.868577        0.703312     0.995547        1.554507   \n",
       "4      -0.442415  0.634750        0.471288     0.995547        1.554507   \n",
       "\n",
       "   PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "0          0.328807           1.153199                    -0.882690   \n",
       "1          0.328807          -0.867153                     1.132901   \n",
       "2          0.328807          -0.867153                    -0.882690   \n",
       "3          0.328807          -0.867153                     1.132901   \n",
       "4          0.328807          -0.867153                     1.132901   \n",
       "\n",
       "   Contract_One year  Contract_Two year  Churn_Yes  Cluster  \n",
       "0           1.917660          -0.562826   1.667536        0  \n",
       "1          -0.521469          -0.562826  -0.599687        3  \n",
       "2           1.917660          -0.562826  -0.599687        3  \n",
       "3          -0.521469           1.776747  -0.599687        2  \n",
       "4          -0.521469          -0.562826  -0.599687        1  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assign cluster labels explicitly\n",
    "df_scaled['Cluster'] = kmeans.labels_\n",
    "\n",
    "# Display first few rows to verify\n",
    "df_scaled.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6a0cca76-e2a3-4389-b41b-06c0c7b89514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Visualize clearly using first two features\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.scatter(df_scaled.iloc[:, 0], df_scaled.iloc[:, 1], c=df_scaled['Cluster'], cmap='viridis', s=50, alpha=0.7)\n",
    "\n",
    "# Explicitly marking cluster centers\n",
    "centers = kmeans.cluster_centers_\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='red', marker='x', s=200, label='Centroids')\n",
    "\n",
    "# Clear labels\n",
    "plt.title('Visualization of Customer Clusters')\n",
    "plt.xlabel('Feature 1 (Standardized)')\n",
    "plt.ylabel('Feature 2 (Standardized)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "273d5b7f-d2da-4ec8-8807-c63f8e134e55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster sizes clearly:\n",
      "Cluster\n",
      "0    1036\n",
      "1    1120\n",
      "2    1125\n",
      "3    1649\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Show many customers in each cluster\n",
    "cluster_counts = df_scaled['Cluster'].value_counts().sort_index()\n",
    "print(\"Cluster sizes clearly:\")\n",
    "print(cluster_counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "14e20bca-0e4b-4f2a-b663-bc53fef6ecce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>Churn_Yes</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-1.031098</td>\n",
       "      <td>0.968482</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>1.153199</td>\n",
       "      <td>-0.882690</td>\n",
       "      <td>1.917660</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>1.667536</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-0.909207</td>\n",
       "      <td>-1.517485</td>\n",
       "      <td>-1.004472</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>1.203576</td>\n",
       "      <td>0.007241</td>\n",
       "      <td>-1.004472</td>\n",
       "      <td>-0.643291</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>-0.882690</td>\n",
       "      <td>1.917660</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>-0.868577</td>\n",
       "      <td>0.703312</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>1.554507</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>1.776747</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.442415</td>\n",
       "      <td>0.634750</td>\n",
       "      <td>0.471288</td>\n",
       "      <td>0.995547</td>\n",
       "      <td>1.554507</td>\n",
       "      <td>0.328807</td>\n",
       "      <td>-0.867153</td>\n",
       "      <td>1.132901</td>\n",
       "      <td>-0.521469</td>\n",
       "      <td>-0.562826</td>\n",
       "      <td>-0.599687</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen    tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "0      -0.442415 -1.031098        0.968482     0.995547       -0.643291   \n",
       "1      -0.442415 -0.909207       -1.517485    -1.004472       -0.643291   \n",
       "2      -0.442415  1.203576        0.007241    -1.004472       -0.643291   \n",
       "3      -0.442415 -0.868577        0.703312     0.995547        1.554507   \n",
       "4      -0.442415  0.634750        0.471288     0.995547        1.554507   \n",
       "\n",
       "   PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "0          0.328807           1.153199                    -0.882690   \n",
       "1          0.328807          -0.867153                     1.132901   \n",
       "2          0.328807          -0.867153                    -0.882690   \n",
       "3          0.328807          -0.867153                     1.132901   \n",
       "4          0.328807          -0.867153                     1.132901   \n",
       "\n",
       "   Contract_One year  Contract_Two year  Churn_Yes  Cluster  \n",
       "0           1.917660          -0.562826   1.667536        0  \n",
       "1          -0.521469          -0.562826  -0.599687        3  \n",
       "2           1.917660          -0.562826  -0.599687        3  \n",
       "3          -0.521469           1.776747  -0.599687        2  \n",
       "4          -0.521469          -0.562826  -0.599687        1  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assign cluster labels to the dataset\n",
    "df_scaled['Cluster'] = kmeans.labels_\n",
    "\n",
    "# Display the first few rows to verify\n",
    "df_scaled.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "91c82699-07d7-4b0b-b08b-44c407b83594",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clustered data saved successfully as 'clustered_data.csv'.\n"
     ]
    }
   ],
   "source": [
    "df_scaled.to_csv('clustered_data.csv', index=False)\n",
    "print(\"Clustered data saved successfully as 'clustered_data.csv'.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16233d2d-4219-45dc-b7fe-feb10fdcc983",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
